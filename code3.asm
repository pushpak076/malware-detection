section .data
    kernel32        db 'kernel32.dll',0
    user32          db 'user32.dll',0
    message         db 'Hello, World!',0

section .text
    global _start
    
_start:
    ; Load library
    mov rax, 0x2e6977746e656c ; "lenwti2e." in reverse order
    xor rcx, rcx
    mov cl, byte [rax+6]
    push rcx
    mov cl, byte [rax+4]
    shl rcx, 8
    or cl, byte [rax+5]
    shl rcx, 8
    or cl, byte [rax+3]
    shl rcx, 8
    or cl, byte [rax+2]
    shl rcx, 8
    or cl, byte [rax+1]
    shl rcx, 8
    or cl, byte [rax]
    mov rdi, rcx
    call LoadLibraryA
    
    ; Get message box function address
    mov rbx, rax
    mov rsi, dword message
    xor rdx, rdx
    xor rcx, rcx
    call [GetModuleHandleA]
    mov rdi, rax
    mov rsi, dword message
    mov rdx, dword message
    xor rcx, rcx
    call [GetProcAddress]
    
    ; Call message box
    xor rcx, rcx
    push rcx
    push dword 0
    push dword 0
    push rsi
    push dword 0
    call rbx
    
    ; Free library
    mov rdi, rbx
    call [FreeLibrary]
    
    ; Exit process
    xor eax, eax
    mov al, 0x1
    xor ebx, ebx
    int 0x80
    
; API functions
LoadLibraryA        db 'LoadLibraryA',0
GetProcAddress     db 'GetProcAddress',0
FreeLibrary         db 'FreeLibrary',0
GetModuleHandleA    db 'GetModuleHandleA',0
section .data
    kernel32        db 'kernel32.dll',0
    user32          db 'user32.dll',0
    message         db 'Hello, World!',0

section .text
    global _start
    
_start:
    ; Load library
    mov rax, 0x2e6977746e656c ; "lenwti2e." in reverse order
    xor rcx, rcx
    mov cl, byte [rax+6]
    push rcx
    mov cl, byte [rax+4]
    shl rcx, 8
    or cl, byte [rax+5]
    shl rcx, 8
    or cl, byte [rax+3]
    shl rcx, 8
    or cl, byte [rax+2]
    shl rcx, 8
    or cl, byte [rax+1]
    shl rcx, 8
    or cl, byte [rax]
    mov rdi, rcx
    call LoadLibraryA
    
    ; Get message box function address
    mov rbx, rax
    mov rsi, dword message
    xor rdx, rdx
    xor rcx, rcx
    call [GetModuleHandleA]
    mov rdi, rax
    mov rsi, dword message
    mov rdx, dword message
    xor rcx, rcx
    call [GetProcAddress]
    
    ; Call message box
    xor rcx, rcx
    push rcx
    push dword 0
    push dword 0
    push rsi
    push dword 0
    call rbx
    
    ; Free library
    mov rdi, rbx
    call [FreeLibrary]
    
    ; Exit process
    xor eax, eax
    mov al, 0x1
    xor ebx, ebx
    int 0x80
    
; API functions
LoadLibraryA        db 'LoadLibraryA',0
GetProcAddress     db 'GetProcAddress',0
FreeLibrary         db 'FreeLibrary',0
GetModuleHandleA    db 'GetModuleHandleA',0
